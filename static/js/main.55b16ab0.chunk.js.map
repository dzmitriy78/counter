{"version":3,"sources":["Settings.tsx","Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Settings","props","style","disableButton","className","type","step","onChange","handlerMaxCountChange","value","maxCount","handlerStartCountChange","startValue","opacity","disabled","onClick","setParameters","Counter","count","onInc","onReset","App","useState","setCount","setMaxValue","setStartValue","useEffect","startValueToString","localStorage","getItem","newStartValue","JSON","parse","maxValueToString","newMaxValue","setItem","stringify","disable","e","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55b16ab0.chunk.js","sourcesContent":["import {ChangeEvent} from \"react\";\r\n\r\ninterface PropsSettings {\r\n    disableButton(): boolean\r\n    setParameters(): void\r\n    handlerStartCountChange(e: ChangeEvent<HTMLInputElement>): void\r\n    handlerMaxCountChange(e: ChangeEvent<HTMLInputElement>): void\r\n    maxCount: string | number\r\n    startValue: string | number\r\n}\r\n\r\nexport const Settings = (props: PropsSettings) => {\r\n\r\n    let style: string;\r\n    style = props.disableButton() ? \"error\" : \"\";\r\n\r\n    return <>\r\n        <div className=\"customBlock\">\r\n\r\n            <div className={\"customScreen\"}>\r\n                max value:\r\n                <input className={style} type=\"number\" step=\"1\" onChange={props.handlerMaxCountChange}\r\n                       value={props.maxCount}/>\r\n            </div>\r\n            <div className={\"customScreen\"}>\r\n                start value:\r\n                <input className={style} type=\"number\" step=\"1\" onChange={props.handlerStartCountChange}\r\n                       value={props.startValue}/>\r\n            </div>\r\n            <div className={\"customButtons\"}>\r\n                <div className={\"set\"}>\r\n                    <button className={\"btn\"}\r\n                            style={{opacity: props.disableButton() ? \"50%\" : \"\"}}\r\n                            disabled={props.disableButton()}\r\n                            onClick={props.setParameters}>set\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n}","type PropsCounterType = {\r\n    disableButton: () => boolean\r\n    count: string | number\r\n    maxCount: string | number\r\n    onReset: () => void\r\n    onInc: () => void\r\n}\r\n\r\nexport const Counter = (props: PropsCounterType) => {\r\n\r\n    const onIncHandler = () => {\r\n        props.onInc()\r\n    }\r\n\r\n    const onResetHandler = () => {\r\n        props.onReset()\r\n    }\r\n\r\n    return <>\r\n        <div className=\"counter\">\r\n            <div className={\"screen\"}>\r\n                <div className={props.count === props.maxCount ? \"large\" : \"\"}>\r\n                    {props.count}\r\n                </div>\r\n            </div>\r\n            <div className={\"buttons\"}>\r\n                <div className={\"inc\"}>\r\n                    <button className={\"btn\"} style={{opacity: props.disableButton() ? \"50%\" : \"\"}}\r\n                            disabled={props.disableButton()}\r\n                            onClick={onIncHandler}>inc\r\n                    </button>\r\n                    <button className={\"btn\"} style={{opacity: props.disableButton() ? \"50%\" : \"\"}}\r\n                            disabled={props.disableButton()}\r\n                            onClick={onResetHandler}>reset\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    </>\r\n}\r\n","import {ChangeEvent, useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {Settings} from \"./Settings\";\r\nimport {Counter} from \"./Counter\";\r\n\r\n\r\nfunction App() {\r\n\r\n    let [count, setCount] = useState<number | string>(\"enter values\")\r\n    const [maxCount, setMaxValue] = useState<number | string>(1)\r\n    const [startValue, setStartValue] = useState<number | string>(0)\r\n\r\n    useEffect(()=>{\r\n            let startValueToString = localStorage.getItem(\"start value\")\r\n            if (startValueToString) {\r\n                let newStartValue = JSON.parse(startValueToString)\r\n                setStartValue(newStartValue)\r\n            }\r\n        },[]\r\n    )\r\n    useEffect(()=>{\r\n            let maxValueToString = localStorage.getItem(\"max value\")\r\n            if (maxValueToString) {\r\n                let newMaxValue = JSON.parse(maxValueToString)\r\n                setMaxValue(newMaxValue)\r\n            }\r\n        },[]\r\n    )\r\n\r\n    const errorHandler = () => {\r\n        if (startValue >= maxCount) {\r\n            setCount(\"incorrect value\")\r\n            return\r\n        }\r\n        if (startValue < 0) {\r\n            setCount(\"incorrect value\")\r\n            return\r\n        }\r\n        setCount(\"enter values\")\r\n    }\r\n    useEffect(() => {\r\n        errorHandler()\r\n    }, [maxCount, startValue])\r\n\r\n    function onInc() {\r\n        if (count < maxCount) {\r\n            count = +count + 1\r\n        } else return\r\n        setCount(count)\r\n    }\r\n\r\n    function onReset() {\r\n        setCount(startValue)\r\n    }\r\n\r\n    useEffect(()=> {\r\n        localStorage.setItem(\"start value\", JSON.stringify(startValue))\r\n        }, [startValue]\r\n    )\r\n    useEffect(()=> {\r\n        localStorage.setItem(\"max value\", JSON.stringify(maxCount))\r\n        }, [maxCount]\r\n    )\r\n\r\n    const handlerMaxCountChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMaxValue(+e.currentTarget.value)\r\n    }\r\n    const handlerStartCountChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStartValue(+e.currentTarget.value)\r\n    }\r\n    const setParameters = () => {\r\n        setCount(startValue)\r\n    }\r\n    const disableButton = (): boolean => {\r\n        let disable = false\r\n        if (startValue >= maxCount) {\r\n            disable = true\r\n        }\r\n        if (startValue < 0) {\r\n            disable = true\r\n        }\r\n        return disable\r\n    }\r\n    return (\r\n        <div className={\"globalApp\"}>\r\n            <Settings setParameters={setParameters}\r\n                      handlerMaxCountChange={handlerMaxCountChange}\r\n                      handlerStartCountChange={handlerStartCountChange}\r\n                      startValue={startValue}\r\n                      maxCount={maxCount}\r\n                      disableButton={disableButton}/>\r\n            <Counter count={count}\r\n                     maxCount={maxCount}\r\n                     onInc={onInc}\r\n                     onReset={onReset}\r\n                     disableButton={disableButton}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}